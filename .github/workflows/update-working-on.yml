name: Update "What I'm working on"

on:
  push:
    branches: [ main, master ]
  # Also refresh periodically so your profile updates even when you push to other repos
  schedule:
    - cron: '*/30 * * * *' # every 30 minutes (UTC)
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: update-working-on
  cancel-in-progress: false

jobs:
  update:
    # Do not run if the event is a push *and* the pusher is the bot
    if: ${{ !(github.event_name == 'push' && github.actor == 'github-actions[bot]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update README with latest activity
        id: update_readme
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;

            async function fetchRecentPublicEvents(username, pages = 10) {
              const events = [];
              for (let page = 1; page <= pages; page++) {
                const { data } = await github.rest.activity.listPublicEventsForUser({
                  username,
                  per_page: 30,
                  page
                });
                if (!data || data.length === 0) break;
                events.push(...data);
              }
              return events;
            }

            // 1) Most recently pushed public repo (skip forks/archived)
            const { data: repos } = await github.rest.repos.listForUser({
              username: owner,
              per_page: 100,
              sort: 'pushed',
              direction: 'desc'
            });
            const recent = repos.find(r => !r.fork && !r.archived);
            if (!recent) {
              core.setFailed("Couldn't find a recent active public repository.");
              return;
            }

            // 2) Latest commit in that repo
            const { data: commits } = await github.rest.repos.listCommits({
              owner: recent.owner.login,
              repo: recent.name,
              per_page: 1
            });
            const latest = commits[0];

            const pushedAt = new Date(recent.pushed_at)
              .toISOString()
              .replace('T',' ')
              .replace('Z',' UTC');

            const firstLine = (latest?.commit?.message || '').split('\n')[0] || 'no commit message';
            const repoLine = `**${recent.full_name}** â€” latest commit: ${latest?.sha?.slice(0,7) || '???????'} â€” _${firstLine}_  \nPushed: ${pushedAt}  \nRepo: https://github.com/${recent.full_name}`;

            // 3) Activity metrics via GraphQL (commit contributions)
            const now = new Date();
            const startTodayUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0));
            const endTodayUTC   = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate() + 1, 0, 0, 0));
            const weekAgoUTC    = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

            const gql = `
              query($login: String!, $fromToday: DateTime!, $toToday: DateTime!, $fromWeek: DateTime!, $toWeek: DateTime!) {
                user(login: $login) {
                  today: contributionsCollection(from: $fromToday, to: $toToday) {
                    totalCommitContributions
                  }
                  week: contributionsCollection(from: $fromWeek, to: $toWeek) {
                    totalCommitContributions
                  }
                }
              }
            `;

            const gqlRes = await github.graphql(gql, {
              login: owner,
              fromToday: startTodayUTC.toISOString(),
              toToday: endTodayUTC.toISOString(),
              fromWeek: weekAgoUTC.toISOString(),
              toWeek: now.toISOString()
            });

            const commitsToday = gqlRes?.user?.today?.totalCommitContributions ?? 0;
            const commitsThisWeek = gqlRes?.user?.week?.totalCommitContributions ?? 0;

            // 4) Optional: public PushEvents in the last week
            const events = await fetchRecentPublicEvents(owner, 10);
            let pushesThisWeek = 0;
            for (const ev of events) {
              if (ev.type !== 'PushEvent') continue;
              const ts = new Date(ev.created_at);
              if (ts >= weekAgoUTC) pushesThisWeek += 1;
            }

            // 5) "Featured Project" block from most recent repo
            const desc = (recent.description && recent.description.trim().length > 0)
              ? recent.description.trim()
              : 'No description yet.';
            const safeDesc = desc.replace(/`/g, '\\`');
            const spotlight = [
              `**${recent.name}**`,
              `${safeDesc}`,
              `ðŸ”— Repo: https://github.com/${recent.full_name}`
            ].join('  \n');

            // 6) Replace sections in README
            const path = 'README.md';
            const startA = '<!--START_SECTION:working_on-->';
            const endA   = '<!--END_SECTION:working_on-->';
            const startB = '<!--START_SECTION:activity_metrics-->';
            const endB   = '<!--END_SECTION:activity_metrics-->';
            const startC = '<!--START_SECTION:project_spotlight-->';
            const endC   = '<!--END_SECTION:project_spotlight-->';

            const original = fs.readFileSync(path, 'utf8');
            let readme = original;

            if (!readme.includes(startA) || !readme.includes(endA)) {
              core.setFailed('README markers for working_on not found.');
              return;
            }
            if (!readme.includes(startB) || !readme.includes(endB)) {
              core.setFailed('README markers for activity_metrics not found.');
              return;
            }

            // Update "What I'm working on"
            const newWorkingOn = `${startA}\n${repoLine}\n${endA}`;
            readme = readme.replace(new RegExp(`${startA}[\\s\\S]*?${endA}`), newWorkingOn);

            // Update Activity metrics
            const metricsBlock = [
              `- **Commits today (UTC):** ${commitsToday}`,
              `- **Commits this week (UTC):** ${commitsThisWeek}`,
              `- **Pushes this week (public events):** ${pushesThisWeek}`
            ].join('\n');
            const newMetrics = `${startB}\n${metricsBlock}\n${endB}`;
            readme = readme.replace(new RegExp(`${startB}[\\s\\S]*?${endB}`), newMetrics);

            // Update Featured Project if markers exist
            if (readme.includes(startC) && readme.includes(endC)) {
              const newSpotlight = `${startC}\n${spotlight}\n${endC}`;
              readme = readme.replace(new RegExp(`${startC}[\\s\\S]*?${endC}`), newSpotlight);
            } else {
              core.info('Project spotlight markers not found; skipping spotlight update.');
            }

            // Normalize for stable diff
            const normalize = (s) => s.replace(/\s+$/, '') + '\n';
            const current = normalize(original);
            const candidate = normalize(readme);

            if (current === candidate) {
              core.info('README unchanged â€” skipping write.');
              core.setOutput('changed', 'false');
              return;
            }

            require('fs').writeFileSync(path, candidate);
            core.setOutput('changed', 'true');
            core.info('README updated.');

      - name: Detect README diffs
        id: diffcheck
        run: |
          if git diff --quiet -- README.md; then
            echo "NO_CHANGES=true" >> "$GITHUB_ENV"
            echo "No changes detected by git diff."
          else
            echo "NO_CHANGES=false" >> "$GITHUB_ENV"
            echo "Changes detected."
          fi

      - name: Commit changes
        if: env.NO_CHANGES != 'true' && steps.update_readme.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update README with latest project activity"
          file_pattern: README.md
