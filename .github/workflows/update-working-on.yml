name: Update "What I'm working on"

on:
  # Every 5 minutes (UTC)
  schedule:
  - cron: "0 * * * *"
  # Manual runs
  workflow_dispatch:
  # Pushes to THIS repo, but ignore README to avoid bot-loop
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'

permissions:
  contents: write

# Avoid overlapping edits entirely
concurrency:
  group: update-working-on
  cancel-in-progress: true

jobs:
  update:
    # Extra guard: if a push triggered by the bot, skip
    if: ${{ !(github.event_name == 'push' && github.actor == 'github-actions[bot]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build README content (public profile)
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const profileRepo = `${owner}/${owner}`;

            async function fetchRecentPublicEvents(username, pages = 10) {
              const events = [];
              for (let page = 1; page <= pages; page++) {
                const { data } = await github.rest.activity.listPublicEventsForUser({
                  username, per_page: 30, page
                });
                if (!data?.length) break;
                events.push(...data);
              }
              return events;
            }

            // 1) Most recently pushed public repo YOU own (skip forks/archived and the profile repo)
            const { data: repos } = await github.rest.repos.listForUser({
              username: owner, per_page: 100, sort: 'pushed', direction: 'desc'
            });
            const recent = repos.find(r => !r.fork && !r.archived && r.full_name !== profileRepo);
            if (!recent) { core.setFailed("Couldn't find a recent active public repository."); return; }

            // 2) Latest commit in that repo
            const { data: commits } = await github.rest.repos.listCommits({
              owner: recent.owner.login, repo: recent.name, per_page: 1
            });
            const latest = commits?.[0];

            const latestSha7 = latest?.sha?.slice(0,7) || '???????';
            const pushedAt = new Date(recent.pushed_at).toISOString().replace('T',' ').replace('Z',' UTC');
            const firstLine = (latest?.commit?.message || '').split('\n')[0] || 'no commit message';
            const repoLine = `**${recent.full_name}** â€” latest commit: ${latestSha7} â€” _${firstLine}_  \nPushed: ${pushedAt}  \nRepo: https://github.com/${recent.full_name}`;

            // README markers
            const path   = 'README.md';
            const startA = '<!--START_SECTION:working_on-->';      const endA = '<!--END_SECTION:working_on-->';
            const startB = '<!--START_SECTION:activity_metrics-->'; const endB = '<!--END_SECTION:activity_metrics-->';
            const startC = '<!--START_SECTION:project_spotlight-->'; const endC = '<!--END_SECTION:project_spotlight-->';

            let readme = fs.readFileSync(path, 'utf8');

            if (!readme.includes(startA) || !readme.includes(endA)) { core.setFailed('README markers for working_on not found.'); return; }
            if (!readme.includes(startB) || !readme.includes(endB)) { core.setFailed('README markers for activity_metrics not found.'); return; }

            // ---- EARLY EXIT: if README already shows this latest SHA, skip any change ----
            const workingOnBlock = (readme.match(new RegExp(`${startA}[\\s\\S]*?${endA}`)) || [])[0] || '';
            const existingShaMatch = workingOnBlock.match(/latest commit:\s+([0-9a-f]{7})/i);
            const existingSha7 = existingShaMatch?.[1] || null;

            if (existingSha7 && existingSha7 === latestSha7) {
              core.info(`README already reflects latest commit ${latestSha7}. Skipping update.`);
              core.setOutput('changed', 'false');
              return;
            }

            // 3) Activity metrics (UTC) â€” only computed when we know we need to refresh
            const now = new Date();
            const startTodayUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0));
            const endTodayUTC   = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()+1, 0, 0, 0));
            const weekAgoUTC    = new Date(now.getTime() - 7*24*60*60*1000);

            const gql = `
              query($login: String!, $fromToday: DateTime!, $toToday: DateTime!, $fromWeek: DateTime!, $toWeek: DateTime!) {
                user(login: $login) {
                  today: contributionsCollection(from: $fromToday, to: $toToday) { totalCommitContributions }
                  week:  contributionsCollection(from: $fromWeek,  to: $toWeek)  { totalCommitContributions }
                }
              }
            `;
            const gqlRes = await github.graphql(gql, {
              login: owner,
              fromToday: startTodayUTC.toISOString(),
              toToday:   endTodayUTC.toISOString(),
              fromWeek:  weekAgoUTC.toISOString(),
              toWeek:    now.toISOString()
            });
            const commitsToday    = gqlRes?.user?.today?.totalCommitContributions ?? 0;
            const commitsThisWeek = gqlRes?.user?.week?.totalCommitContributions ?? 0;

            // 4) Public PushEvents in last week
            const events = await fetchRecentPublicEvents(owner, 10);
            let pushesThisWeek = 0;
            for (const ev of events) {
              if (ev.type !== 'PushEvent') continue;
              const ts = new Date(ev.created_at);
              if (ts >= weekAgoUTC) pushesThisWeek += 1;
            }

            // 5) Spotlight
            const desc = (recent.description && recent.description.trim()) ? recent.description.trim() : 'No description yet.';
            const safeDesc = desc.replace(/`/g, '\\`');
            const spotlight = [`**${recent.name}**`, `${safeDesc}`, `ðŸ”— Repo: https://github.com/${recent.full_name}`].join('  \n');

            // 6) Produce updated README content
            const metricsBlock = [
              `- **Commits today (UTC):** ${commitsToday}`,
              `- **Commits this week (UTC):** ${commitsThisWeek}`,
              `- **Pushes this week (public events):** ${pushesThisWeek}`
            ].join('\n');

            const updatedA = readme.replace(new RegExp(`${startA}[\\s\\S]*?${endA}`), `${startA}\n${repoLine}\n${endA}`);
            const updatedB = updatedA.replace(new RegExp(`${startB}[\\s\\S]*?${endB}`), `${startB}\n${metricsBlock}\n${endB}`);
            const updatedC = (updatedB.includes(startC) && updatedB.includes(endC))
              ? updatedB.replace(new RegExp(`${startC}[\\s\\S]*?${endC}`), `${startC}\n${spotlight}\n${endC}`)
              : updatedB;

            // 7) Only write if content actually changed
            if (updatedC !== readme) {
              fs.writeFileSync(path, updatedC);
              core.info(`README changed (new latest commit ${latestSha7}) â€” will commit.`);
              core.setOutput('changed', 'true');
            } else {
              core.info('No changes to README â€” skipping commit.');
              core.setOutput('changed', 'false');
            }

      - name: Commit changes
        if: steps.build.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update README with latest project activity"
          file_pattern: README.md
